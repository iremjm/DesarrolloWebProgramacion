/*Ejercicios Gestión Instituto

Modifica el proyecto de Gestión de Instituto siguiendo los siguientes pasos:

Implementa todas las funciones que definimos en la clase GestorAlumnos para poder añadir, modificar, eliminar, buscar, obtener un listado,.... 

Modifica la clase Programa para poder trabajar con un objeto de la clase GestorAlumnos. El programa nos permitirá la gestión de alumnos utilizando el siguiente menú:

***** MENÚ DE ALUMNOS ********
1.-Añadir
2.- Modificar 
3.- Borrar
4.- Buscar
5.- Imprime
6.- Salir
Opción:

Opción 1(Añadir)-> solicitará al usuario por consola los datos necesarios para crear un alumno y llamará al método addAlumno del gestor para que añada el alumno. Volver al menú principal.

Opción 2(Modificar)-> solicitará el índice del alumno que desea modificar y los datos del nuevo alumno(nombre, nota),crear un alumno con dichos datos y  posteriormente llamaremos al método modAlumno(index, al) para que modifique el alumno de esa posición.Volver al menú principal.

Opción 3(Borrar)->solicitará el índice del alumno que se desea eliminar y llamaremos al método delAlumno(index) del gestor.Volver al menú principal.

Opción 4(Buscar)->solicitará el índice del alumno que desea buscar, y si existe mostrará la información correspondiente a ese alumno por consola.Volver al menú principal.

Opción 5(Imprime)->solicitará al gestor de alumnos un array de alumnos con la información de todos los alumnos llamando al método []Alumno getAlumnos(), y mostrará por consola la información de los alumnos.Volver al menú principal.

Opción 6(Salir)->Finaliza el programa.

Intenta tratar los posibles errores que se puedan generar durante la ejecución del programa.

Teniendo en cuenta lo que hemos hecho para implementar la clase GestorAlumnos, diseña un GestorProfesores para poder realizar las acciones necesarias en la gestión del profesorado.
*/

package model;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;



public class GestorAlumnos {
	private static final String FICHERO_LISTADO=".\\listado.ser";//Cargar los datos del fichero
	private ArrayList<Alumno> lstAlumnos=new ArrayList<Alumno>();//el arraylist no tiene tamaño fijo,se modifica internamente.
	public GestorAlumnos(){
		leerListado();
		
	}
	public void leerListado(){

		//método que lee del fichero los datos de los alumnos
			FileInputStream fin = null;
			ObjectInputStream ois = null;

			try {
				//puede que no exista el fichero
				fin = new FileInputStream(FICHERO_LISTADO);
				ois = new ObjectInputStream(fin);
				lstAlumnos = (ArrayList<Alumno>) ois.readObject();

			}catch (FileNotFoundException fnfe){
				//no eiste el fichero,porque no se han
				//introducido datos...
			}
			catch (Exception ex) {
				ex.printStackTrace();
			} finally {

				if (fin != null) {
					try {
						fin.close();
					} catch (IOException e) {
						e.printStackTrace();
					}
				}

				if (ois != null) {
					try {
						ois.close();
					} catch (IOException e) {
						e.printStackTrace();
					}
				}

			}
		}

	
	public void guardarListado(){
	//método que guarda en un fichero los datos de los alumnos
		FileOutputStream fout=null;
		ObjectOutputStream oos=null;
		try {
			fout = new FileOutputStream(FICHERO_LISTADO);
			oos = new ObjectOutputStream(fout);
			oos.writeObject(lstAlumnos);
			
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			System.out.println("Fichero no encontrado!!");
		} catch (IOException e) {
			// TODO Auto-generated catch block
			
			System.out.println("Error de escritura");
		}		
		finally {

			if (fout != null) {
				try {
					fout.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}

			if (oos != null) {
				try {
					oos.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	}
	public void addAlumno(Alumno a){
		lstAlumnos.add(a);
			}
	//Eliminar alumno
	public void delAlumno(int index){//elimina el objeto que se encuentra en el indice
		lstAlumnos.remove(index);
	}
	public void delAlumno(Alumno al){
		lstAlumnos.remove(al);
	}
	//modificar alumno
	public void modAlumno(int index, Alumno al){
		lstAlumnos.set(index, al);
	}
	//Contar cuantos alumnos hay
	public int getCantidadAlumnos(){
		
		return lstAlumnos.size();
	}
	//Buscar un alumno
	Alumno getAlumno(String nombre){
		  for(int i = 0 ; i < lstAlumnos.size();i++) {
			  Alumno a=lstAlumnos.get(i);
			  	if(a.getNombre().toUpperCase().equals(nombre.toUpperCase())){
			  		return a;
			  	}
		  }
		  return null;
	}
	
	Alumno getAlumno(int index){
		return lstAlumnos.get(index);
	}
	
}
